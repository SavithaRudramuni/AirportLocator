//
//  AirportSearchWorker.swift
//  AirportFinder
//
//  Created by Savitha Rudramuni on 17/11/19.
//  Copyright (c) 2019 Savitha Rudramuni. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class AirportSearchWorker
{
//    func searchNearchByAirport(request: AirportSearch.NearBy.Request, closure:@escaping (AirportSearch.NearBy.Response, _ error:NSError?)->()) {
//
//        AirportService().serarchNearchByAirport(latitude: Float(request.latitude),longitude: Float(request.longitude)) { (data:Data?, error:NSError?) in
//
//            var airports:[Airport]?
//
//            if let jsonData = data {
//                do {
//                let  aip  = try? JSONDecoder().decode(APIResponse.self, from: jsonData)
//                airports =  aip?.results
//                    print(airports ?? "no result")
//            }catch let parsingError
//                {
//                    print("Error", parsingError)
//                }
//
//
//            closure(AirportSearch.NearBy.Response(airports: airports),error)
//        }
//    }
//}
    
    func searchNearchByAirport(request: AirportSearch.NearBy.Request, closure:@escaping (AirportSearch.NearBy.Response, _ error:NSError?)->()) {
        
        AirportRadipService().serarchNearchByAirport(latitude: Float(request.latitude),longitude: Float(request.longitude)) { (data:Data?, error:NSError?) in
            
            let response = AirportSearch.NearBy.Response.self
            
            var airports:[Airport]?
            
            if let jsonData = data {

            let a  = try? JSONDecoder().decode(Airport.self, from: jsonData)
                
            if let a  =  a {
                 airports = [a]
                print(airports ?? "no result")
            }
            
                    }
            
           
            closure(response.init(airports: airports),error)
        }
    }

}



