//
//  AirportSearchViewController.swift
//  AirportFinder
//
//  Created by Savitha Rudramuni on 17/11/19.
//  Copyright (c) 2019 Savitha Rudramuni. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit

protocol AirportSearchDisplayLogic: class
{
  func displaySearchResult(viewModel: AirportSearch.Search.ViewModel)
    
    func displayResult(viewModel: AirportSearch.NearBy.Response)
}

class AirportSearchViewController: UIViewController, AirportSearchDisplayLogic
{
  var interactor: AirportSearchBusinessLogic?
  var router: (NSObjectProtocol & AirportSearchRoutingLogic & AirportSearchDataPassing)?
    
  @IBOutlet weak var mapView:MKMapView!
  @IBOutlet weak var searchBar:UISearchBar!
    

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = AirportSearchInteractor()
    let presenter = AirportSearchPresenter()
    let router = AirportSearchRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    self.setUpMap(current: nil)
    
    LocationManager.shared.retriveCurrentLocation()
    
    LocationManager.shared.currentLocation = { (location:CLLocation) in
       
        self.setUpMap(current: location)
        self.fetchNearByAirport(latitude: location.coordinate.latitude, longitude: location.coordinate.longitude)
    }
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
    func fetchNearByAirport(latitude: CLLocationDegrees, longitude: CLLocationDegrees)
  {
    let request = AirportSearch.NearBy.Request(latitude: latitude,longitude: longitude)
    interactor?.fetchNearByAirport(request: request)
    
  }
  
  func displaySearchResult(viewModel: AirportSearch.Search.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
    
    func setUpMap(current:CLLocation?) {
        self.mapView.showsUserLocation =  true
        self.mapView.delegate =  self
        
        
    }
    
    func displayResult(viewModel: AirportSearch.NearBy.Response) {
        
        DispatchQueue.main.async {
            
            let span = MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05)
            
            if let airports =  viewModel.airports {
                
                for a in airports {
                    
                   
                    if let lat = a.location?.latitude  , let log = a.location?.longitude {
                    let coordinate = CLLocationCoordinate2D(latitude: lat, longitude: log)
                
                    let region = MKCoordinateRegion(center: coordinate, span: span)
                    self.mapView.setRegion(region, animated: true)
                        
                    let annotation = AirportAnnotation()
                    annotation.coordinate = coordinate
                    annotation.title = a.name
                    annotation.subtitle = "name"
                    self.mapView.addAnnotation(annotation)
    
                    
                    self.mapView.delegate =  self
                    
                    }
                }
            }
            
            var zoomRect: MKMapRect = .null
            for annotation in self.mapView.annotations {
                let annotationPoint = MKMapPoint(annotation.coordinate)
                let pointRect = MKMapRect(x: annotationPoint.x, y: annotationPoint.y, width: 0.1, height: 0.1)
                if zoomRect.isNull {
                    zoomRect = pointRect
                } else {
                    zoomRect = zoomRect.union(pointRect)
                }
            }
            self.mapView.setVisibleMapRect(zoomRect, animated: true)
            
            zoomRect = self.mapView.mapRectThatFits(zoomRect)
            if(!zoomRect.isEmpty) {
                self.mapView.setVisibleMapRect(zoomRect, animated: true)
            }
        }
        
    }
}

extension AirportSearchViewController: MKMapViewDelegate {
    
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {        guard annotation is MKPointAnnotation else { return nil }

        let identifier = "Annotation"
        var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: identifier)

        if annotationView == nil {
            annotationView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: identifier)
            annotationView!.canShowCallout = true
        } else {
            annotationView!.annotation = annotation
        }

        return annotationView
    }

    func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -> MKOverlayRenderer {
        let renderer = MKCircleRenderer(overlay: overlay)
        renderer.fillColor = UIColor.black.withAlphaComponent(0.5)
        renderer.strokeColor = UIColor.blue
        renderer.lineWidth = 2
        return renderer
    }
}
